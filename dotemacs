(custom-set-variables
	;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
	;; Your init file should contain only one such instance.
	'(auto-compression-mode t nil (jka-compr))
	'(auto-mode-alist (quote (("" . fundamental-mode))) t)
	'(case-fold-search t)
	'(current-language-environment "UTF-8")
	'(default-input-method "rfc1345")
	'(default-tab-width 4 t)
	'(global-font-lock-mode t nil (font-lock))
	'(interpreter-mode-alist nil t)
	'(pc-select-meta-moves-sexps t)
	'(pc-select-selection-keys-only t)
;	'(pc-selection-mode t t)
	'(save-place t nil (saveplace))
	'(make-backup-files nil)
	'(show-paren-mode t nil (paren))
	'(tool-bar-mode nil)
	'(tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 88 96 104 112 120)))
	'(transient-mark-mode t)
	'(delete-selection-mode t)
)
(custom-set-faces
	;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
	;; Your init file should contain only one such instance.
 )

;+
; End Emacs-generated stuff, begin my stuff
;-

(put 'narrow-to-region 'disabled nil)
(setq initial-frame-alist '((top . 1) (left . 520) (width . 100) (height . 60)))
(set-face-attribute 'default nil :family "fixed")
(server-start)
(set 'inhibit-startup-message t)
(set 'initial-scratch-message
	(purecopy "; Scratch buffer -- list evaluation\n\n")
)

(global-unset-key [?\C-t]) ; keep hitting it accidentally

(when (fboundp 'next-logical-line)
	(global-set-key [down] 'next-logical-line)
	(global-set-key [up] 'previous-logical-line)
	(global-set-key (kbd "M-<down>") 'next-line)
	(global-set-key (kbd "M-<up>") 'previous-line)
) ; when

; MPW-style shortcuts (?\s- is Windows key)
(global-set-key [?\s-o] 'find-file) ; open...
(global-set-key [?\s-w]
	'(lambda ()
		"closes the current buffer."
		(interactive)
		(kill-buffer (current-buffer))
	) ; lambda
)
(global-set-key [?\s-s] 'save-buffer) ; save
(global-set-key [?\s-S] 'write-file) ; save as...
(global-set-key [?\s-q] 'save-buffers-kill-emacs) ; quit
(global-set-key [?\s-z] 'undo)

(global-set-key [menu] 'tmm-menubar)

(defun revert ()
	"revert current buffer without confirmation."
	(interactive)
	(revert-buffer t t)
) ; revert

(global-set-key [?\C-c ?d]
	'(lambda ()
		"inserts current date in canonical format."
		(interactive)
		(insert (shell-command-to-string "date +\"%Y %B %-d\""))
		(delete-char -1) ; get rid of newline
	) ; lambda
)

(global-set-key [?\C-c ?l]
	'(lambda ()
		"inserts my standard identification string."
		(interactive)
		(insert "Lawrence D'Oliveiro <ldo@geek-central.gen.nz>")
	) ; lambda
)

;+
; Indentation control
;-

(global-set-key "\t" 'tab-to-tab-stop)
(defun auto_indent ()
	"auto-indent the way I like it."
	(interactive)
	(let ((previndent (current-indentation)))
		(newline)
		(delete-horizontal-space)
		(indent-to previndent)
	) ; let
) ; auto_indent

(defun set_auto_indent (&optional on)
	"lets user change auto-indent setting."
	(interactive)
	(when (eq on nil)
		(set 'on
			(y-or-n-p
				(format
					"Auto-indent [%s]? "
					(if
						(eq
							(lookup-key (current-global-map) "\015")
							'auto_indent
						)
						"y"
						"n"
					) ; if
				)
			)
		) ; set
	) ; when
	(cond
		(on
			(global-set-key "\015" 'auto_indent)
			(global-set-key [?\C-\M-m] 'newline)
			(message "Auto-indent on")
		)
		(t
			(global-set-key "\015" 'newline)
			(global-set-key [?\C-\M-m] 'auto_indent)
			(message "Auto-indent off")
		)
	) ; cond
) ; set_auto_indent

(set_auto_indent t) ; only possible default

(global-set-key [?\s-]]
	'(lambda (beg end)
		"indent selected range by 4 columns without losing selection."
		(interactive "*r")
		(let (deactivate-mark)
			(set 'point_marker (point-marker))
			(indent-rigidly beg end 4)
			(goto-char (marker-position point_marker))
		) ; let
	) ; lambda
)

(global-set-key [?\s-[]
	'(lambda (beg end)
		"unindent selected range by 4 columns without losing selection."
		(interactive "*r")
		(let (deactivate-mark)
			(set 'point_marker (point-marker))
			(indent-rigidly beg end -4)
			(goto-char (marker-position point_marker))
		) ; let
	) ; lambda
)

(global-set-key [?\C-c ?t]
	'(lambda ()
		"toggle tab expansion for current buffer."
		(interactive)
		(cond
			(indent-tabs-mode
				(set 'indent-tabs-mode nil)
				(message "tabs will be expanded to spaces")
			)
			(t
				(set 'indent-tabs-mode t)
				(message "tabs will not be expanded to spaces")
			)
		) ; cond
	) ; lambda
)

;+
; Command buffers
;-

(defun make-command-buffer (cmd name)
	"creates a command buffer with the specified name, executing the specified cmd on selected text when ctrl-j is hit."
	(interactive "sCmd: \nsBuffer name: ")
	(let
		(
			(thebuffer (generate-new-buffer name))
			(thekeymap (make-sparse-keymap))
		)
		(switch-to-buffer thebuffer)
		(make-local-variable 'buffer-command)
		(setq buffer-command (split-string cmd))
		(use-local-map thekeymap)
		(define-key
			thekeymap
			[?\C-j]
			'(lambda ()
				(interactive)
				(let (beg end)
					(cond
						(mark-active
							(setq beg (min (point) (mark)))
							(setq end (max (point) (mark)))
						)
						(t
							(setq beg (search-backward "\n" nil t))
							(cond
								((eq beg nil)
									(setq beg (point-min))
								)
								(t
									(setq beg (+ beg 1))
								)
							) ; cond
							(forward-char)
							(search-forward "\n" nil 1)
							(setq end (point))
						)
					) ; cond
					(deactivate-mark)
					(goto-char end)
					(unless (eq (char-before) 10)
						(insert "\n")
						(setq end (point))
					) ; unless
					(eval `(call-process-region beg end (car buffer-command) nil t ,@buffer-command))
				) ; let
			) ; lambda
		) ; define-key
		(insert "# press ctrl-j to execute \"")
		(insert cmd)
		(insert "\" on selected text.\n\n")
	) ; let
) ; defun

;+
; Search/replace, MPW-style
;-

(defvar last_search_string "" "last-used search string")

(defun search_next (fwd)
	"searches for next/previous occurrence of last_search_string."
	(let ((startpos))
		(unless (equal last_search_string "")
			(cond
				(mark-active
					(set 'startpos
						(cond
							(fwd
								(max (point) (mark))
							)
							(t
								(min (point) (mark))
							)
						) ; cond
					)
				)
				(t
					(set 'startpos (point))
				)
			) ; cond
			(deactivate-mark)
			(goto-char startpos) ; so I don't match current selection
			(cond
				(fwd
					(when (search-forward last_search_string)
						(set-mark (match-beginning 0))
					) ; when
				)
				(t
					(when (search-backward last_search_string)
						(set-mark (match-end 0))
					) ; when
				)
			) ; cond
		) ; unless
	) ; let
) ; search_next

(global-set-key [?\s-h]
	; search forward for next occurrence of current selection
	'(lambda (selbegin selend)
		(interactive "r")
		(cond
			(mark-active
				(set 'last_search_string (buffer-substring selbegin selend))
				(search_next t)
			)
			(t
				(ding)
			)
		) ; cond
	) ; lambda
)

(global-set-key [?\s-H]
	; search backward for next occurrence of current selection
	'(lambda (selbegin selend)
		(interactive "r")
		(cond
			(mark-active
				(set 'last_search_string (buffer-substring selbegin selend))
				(search_next nil)
			)
			(t
				(ding)
			)
		) ; cond
	) ; lambda
)

(global-set-key [?\s-g]
	; search forward for next occurrence of last_search_string
	'(lambda ()
		(interactive)
		(search_next t)
	) ; lambda
)

(global-set-key [?\s-G]
	; search backward for next occurrence of last_search_string
	'(lambda ()
		(interactive)
		(search_next nil)
	) ; lambda
)
